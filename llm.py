import logging
import re
from datetime import datetime

logger = logging.getLogger(__name__)

WEEKDAYS_RU = {
    "Monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "Tuesday": "–í—Ç–æ—Ä–Ω–∏–∫", "Wednesday": "–°—Ä–µ–¥–∞",
    "Thursday": "–ß–µ—Ç–≤–µ—Ä–≥", "Friday": "–ü—è—Ç–Ω–∏—Ü–∞", "Saturday": "–°—É–±–±–æ—Ç–∞", "Sunday": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
}

def llm_transform(homeworks: list) -> str:
    try:
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–æ–º–∞—à–∫–∏ –ø–æ –¥–∞—Ç–µ –∏ –ø—Ä–µ–¥–º–µ—Ç—É
        hw_by_date = {}
        for hw in homeworks:
            date_str = hw.get('lesson_date')
            subject = hw.get('subject') or "–ü—Ä–µ–¥–º–µ—Ç –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
            text = hw.get('task') or "–ë–µ–∑ –∑–∞–¥–∞–Ω–∏—è"
            if not date_str:
                continue
            date_obj = datetime.strptime(date_str, '%Y-%m-%d').date()
            hw_by_date.setdefault(date_obj, []).append((subject, text))

        lines = []
        for date in sorted(hw_by_date):
            day_ru = WEEKDAYS_RU[date.strftime('%A')]
            # Escape periods in dates for MarkdownV2
            formatted_date = date.strftime('%d.%m').replace('.', r'\.')
            # Use escaped hyphen in header
            lines.append(f"*{day_ru} \- {formatted_date}*")
            for subj, text in hw_by_date[date]:
                task_text = text if text.strip() and text.lower() not in ['–±–µ–∑ –∑–∞–¥–∞–Ω–∏—è', '–Ω–µ—Ç –∑–∞–¥–∞–Ω–∏—è', '–Ω–µ—Ç –¥–∑'] else "‚ùå –î–ó –Ω–µ—Ç"
                # Escape special characters in task_text
                task_text = re.sub(r'([_*\[\]()~`>#+\-=|{}.!])', r'\\\1', task_text)
                # Escape periods in URLs and dates within task_text
                task_text = re.sub(r'(\d{1,2})\.(\d{1,2})', r'\1\.\2', task_text)
                task_text = re.sub(r'(\w+)\.(\w+)', r'\1\.\2', task_text)
                lines.append(f"‚Ä¢ _{subj}_: {task_text}")
            lines.append("")  # Add blank line between days

        # Join lines and remove trailing blank line
        result = "\n".join(lines).rstrip()
        return result

    except Exception as e:
        logger.error("ü§Ø –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞: %s", e, exc_info=True)
        return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –î–ó\\. –ü—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏\\."