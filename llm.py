import requests
import logging
import time
from datetime import datetime

logger = logging.getLogger(__name__)

WEEKDAYS_RU = {
    "Monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "Tuesday": "–í—Ç–æ—Ä–Ω–∏–∫", "Wednesday": "–°—Ä–µ–¥–∞",
    "Thursday": "–ß–µ—Ç–≤–µ—Ä–≥", "Friday": "–ü—è—Ç–Ω–∏—Ü–∞", "Saturday": "–°—É–±–±–æ—Ç–∞", "Sunday": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
}

def llm_transform(homeworks: list) -> str:
    try:
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–æ–º–∞—à–∫–∏ –ø–æ –¥–∞—Ç–µ –∏ –ø—Ä–µ–¥–º–µ—Ç—É
        hw_by_date = {}
        for hw in homeworks:
            date_str = hw.get('lesson_date')
            subject = hw.get('subject') or "–ü—Ä–µ–¥–º–µ—Ç –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
            text = hw.get('task') or "–ë–µ–∑ –∑–∞–¥–∞–Ω–∏—è"
            if not date_str:
                continue
            date_obj = datetime.strptime(date_str, '%Y-%m-%d').date()
            hw_by_date.setdefault(date_obj, []).append((subject, text))

        lines = []
        for date in sorted(hw_by_date):
            day_ru = WEEKDAYS_RU[date.strftime('%A')]
            lines.append(f"*{day_ru} - {date.strftime('%d.%m')}*")
            for subj, text in hw_by_date[date]:
                task_text = text if text.strip() and text.lower() not in ['–±–µ–∑ –∑–∞–¥–∞–Ω–∏—è', '–Ω–µ—Ç –∑–∞–¥–∞–Ω–∏—è', '–Ω–µ—Ç –¥–∑'] else "‚ùå –î–ó –Ω–µ—Ç"
                lines.append(f"‚Ä¢ _{subj}_: {task_text}")
            lines.append("")

        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤
        lines = [line.strip() for line in lines if line.strip()]
        prompt = (
            "–¢—ã ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –ø—Ä–µ–≤—Ä–∞—â–∞—é—â–∏–π —à–∫–æ–ª—å–Ω—ã–µ –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –≤ –ø–æ–Ω—è—Ç–Ω—ã–π –∏ –ø—Ä–∏—è—Ç–Ω—ã–π –æ—Ç—á—ë—Ç.\n"
            "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π, —Ä–∞–∑–±–∏—Ç—ã–π –ø–æ –¥–Ω—è–º –∏ –ø—Ä–µ–¥–º–µ—Ç–∞–º:\n\n"
            + "\n".join(lines) +
            "\n–°–æ—Å—Ç–∞–≤—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ MarkdownV2. "
            "–ò—Å–ø–æ–ª—å–∑—É–π *–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç* –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–Ω–µ–π –∏ _–∫—É—Ä—Å–∏–≤_ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏–π –ø—Ä–µ–¥–º–µ—Ç–æ–≤. "
            "–≠–∫—Ä–∞–Ω–∏—Ä—É–π —Ç–æ—á–∫–∏ –≤ –¥–∞—Ç–∞—Ö –∏ URL (–Ω–∞–ø—Ä–∏–º–µ—Ä, 17.05 ‚Üí 17\\.05, edsso.ru ‚Üí edsso\\.ru)."
        )

        logger.info("üßæ RAW PROMPT TO LLM:\n%s", prompt)

        start_time = time.time()

        response = requests.post(
            'http://localhost:11434/api/generate',
            json={
                "model": "gemma:2b",
                "prompt": prompt,
                "stream": False,
            },
            timeout=30
        )

        response.raise_for_status()
        result = response.json().get("response", "üß† –î–µ–º–æ–Ω –≤–ø–∞–ª –≤ —Å—Ç—É–ø–æ—Ä. –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞.")

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        result = re.sub(r'\s+', ' ', result).strip()  # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        result = re.sub(r'\n\n+', '\n', result)  # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫

        logger.info("‚úÖ LLM –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –∑–∞ %.2f —Å–µ–∫:\n%s", time.time() - start_time, result)
        return result

    except Exception as e:
        logger.error("ü§Ø –û—à–∏–±–∫–∞ –æ–±—â–µ–Ω–∏—è —Å LLM: %s", e, exc_info=True)
        return "‚ö†Ô∏è LLM –¥–µ–º–æ–Ω –∑–∞—Ö–ª–µ–±–Ω—É–ª—Å—è –≤ —Å–≤–æ–∏—Ö –≤–∏–¥–µ–Ω–∏—è—Ö."