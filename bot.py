import logging
import nest_asyncio
import asyncio
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes
from config import TOKEN
from fetcher import fetch_homeworks

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    kb = [[InlineKeyboardButton("üìú –ü—Ä–∏–∑–≤–∞—Ç—å –î–ó", callback_data='get_hw')]]
    await update.message.reply_text(
        "–Ø–≤–∏–ª—Å—è –ø–æ –ø–µ—Ä–≤–æ–º—É —Ç–≤–æ–µ–º—É –∫–ª–∏–∫—É, –¢–µ–º–Ω–µ–π—à–∏–π...\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –∏ —è –ø—Ä–∏–Ω–µ—Å—É —Ç–µ–±–µ –î–ó —Å –∞–ª—Ç–∞—Ä—è –∑–Ω–∞–Ω–∏–π:",
        reply_markup=InlineKeyboardMarkup(kb)
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    if q.data == 'get_hw':
        try:
            text = fetch_homeworks()
            await q.edit_message_text(text, parse_mode='MarkdownV2')
        except Exception as e:
            logger.error("üö® –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: %s", e)
            await q.edit_message_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –î–ó. –ü—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏.")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üßæ /start ‚Äî –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ\nüìñ /help ‚Äî –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")

async def main():
    logger.info("üßø –ü—Ä–∏–∑—ã–≤–∞—é –¥–µ–º–æ–Ω–∞ Telegram...")
    if not load_token():
        logger.info("üîê –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–∏–∑—ã–≤–∞—é Selenium –¥–ª—è –≤—Ö–æ–¥–∞...")
        get_token_with_browser()

    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CallbackQueryHandler(button_handler))
    await app.run_polling()

if __name__ == "__main__":
    nest_asyncio.apply()
    if asyncio.get_event_loop().is_running():
        asyncio.get_event_loop().stop()
    asyncio.run(main())