from selenium.webdriver.chrome.service import Service as ChromeService
from selenium.webdriver.chrome.options import Options as ChromeOptions
from selenium import webdriver
import time
import json
import os
import logging

# –í –Ω–∞—á–∞–ª–µ —Ç–≤–æ–µ–≥–æ —Ñ–∞–π–ª–∞
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("fetcher")

TOKEN_PATH = 'bearer_token.json'
COOKIES_PATH = 'cookies.json'
KIASUO_URL = "https://pwa.kiasuo.ru/"

def save_token(token: str):
    with open(TOKEN_PATH, 'w', encoding='utf-8') as f:
        json.dump({"token": token}, f)

def load_token() -> str | None:
    if os.path.exists(TOKEN_PATH):
        with open(TOKEN_PATH, 'r', encoding='utf-8') as f:
            data = json.load(f)
            return data.get("token")
    return None

def save_cookies(driver):
    cookies = driver.get_cookies()
    with open(COOKIES_PATH, 'w', encoding='utf-8') as f:
        json.dump(cookies, f)

def load_cookies() -> list | None:
    if os.path.exists(COOKIES_PATH):
        with open(COOKIES_PATH, 'r', encoding='utf-8') as f:
            return json.load(f)
    return None

def get_token_with_browser() -> str:
    opts = ChromeOptions()
    opts.add_argument("--start-maximized")
    # –£–∫–∞–∂–∏ –ø—É—Ç—å –∫ –±–∏–Ω–∞—Ä–Ω–∏–∫—É —Ö—Ä–æ–º–∞, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, chromium-browser)
    opts.binary_location = "/usr/bin/chromium-browser"  # –∏–ª–∏ "/usr/bin/google-chrome"

    # –ú–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å –æ–ø—Ü–∏—é –¥–ª—è headful —Ä–µ–∂–∏–º–∞, —á—Ç–æ–± –≤–∏–¥–µ—Ç—å –æ–∫–Ω–æ –±—Ä–∞—É–∑–µ—Ä–∞:
    # opts.add_argument("--headless=new")  # –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –±–µ–∑ –æ–∫–Ω–∞

    service = ChromeService()  # chromedriver –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ PATH

    driver = webdriver.Chrome(service=service, options=opts)
    driver.get(KIASUO_URL)

    print("üõë –í–ª–∞–¥—ã–∫–∞, –∑–∞–π–¥–∏ –≤—Ä—É—á–Ω—É—é –∏ –Ω–∞–∂–º–∏ '–í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ –ì–æ—Å—É—Å–ª—É–≥–∏'.")

    while True:
        try:
            token = driver.execute_script("return window.localStorage.getItem('token');")
            if token:
                save_token(token)
                save_cookies(driver)
                driver.quit()
                logger.info("‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–∑–≤–∞–Ω, –í–ª–∞–¥—ã–∫–∞.")  # <-- –¥–æ–±–∞–≤–∏–ª –ª–æ–≥
                return token
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
        time.sleep(1)
